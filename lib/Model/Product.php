<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Product Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Product implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'createdBy' => 'string',
        'productype' => 'string',
        'selectedBrandID' => 'string',
        'selectedMerchantsIDs' => 'string[]',
        'barcodes' => 'string[]',
        'coupons' => '\Swagger\Client\Model\Coupon[]',
        'geoPosition' => '\Swagger\Client\Model\Geometry',
        'userDefined' => 'object'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'createdBy' => 'createdBy',
        'productype' => 'productype',
        'selectedBrandID' => 'selectedBrandID',
        'selectedMerchantsIDs' => 'selectedMerchantsIDs',
        'barcodes' => 'barcodes',
        'coupons' => 'coupons',
        'geoPosition' => 'geoPosition',
        'userDefined' => 'userDefined'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'createdBy' => 'setCreatedBy',
        'productype' => 'setProductype',
        'selectedBrandID' => 'setSelectedBrandID',
        'selectedMerchantsIDs' => 'setSelectedMerchantsIDs',
        'barcodes' => 'setBarcodes',
        'coupons' => 'setCoupons',
        'geoPosition' => 'setGeoPosition',
        'userDefined' => 'setUserDefined'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'createdBy' => 'getCreatedBy',
        'productype' => 'getProductype',
        'selectedBrandID' => 'getSelectedBrandID',
        'selectedMerchantsIDs' => 'getSelectedMerchantsIDs',
        'barcodes' => 'getBarcodes',
        'coupons' => 'getCoupons',
        'geoPosition' => 'getGeoPosition',
        'userDefined' => 'getUserDefined'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['productype'] = isset($data['productype']) ? $data['productype'] : null;
        $this->container['selectedBrandID'] = isset($data['selectedBrandID']) ? $data['selectedBrandID'] : null;
        $this->container['selectedMerchantsIDs'] = isset($data['selectedMerchantsIDs']) ? $data['selectedMerchantsIDs'] : null;
        $this->container['barcodes'] = isset($data['barcodes']) ? $data['barcodes'] : null;
        $this->container['coupons'] = isset($data['coupons']) ? $data['coupons'] : null;
        $this->container['geoPosition'] = isset($data['geoPosition']) ? $data['geoPosition'] : null;
        $this->container['userDefined'] = isset($data['userDefined']) ? $data['userDefined'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['id'] === null) {
            $invalid_properties[] = "'id' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['id'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets createdBy
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     * @param string $createdBy
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets productype
     * @return string
     */
    public function getProductype()
    {
        return $this->container['productype'];
    }

    /**
     * Sets productype
     * @param string $productype
     * @return $this
     */
    public function setProductype($productype)
    {
        $this->container['productype'] = $productype;

        return $this;
    }

    /**
     * Gets selectedBrandID
     * @return string
     */
    public function getSelectedBrandID()
    {
        return $this->container['selectedBrandID'];
    }

    /**
     * Sets selectedBrandID
     * @param string $selectedBrandID
     * @return $this
     */
    public function setSelectedBrandID($selectedBrandID)
    {
        $this->container['selectedBrandID'] = $selectedBrandID;

        return $this;
    }

    /**
     * Gets selectedMerchantsIDs
     * @return string[]
     */
    public function getSelectedMerchantsIDs()
    {
        return $this->container['selectedMerchantsIDs'];
    }

    /**
     * Sets selectedMerchantsIDs
     * @param string[] $selectedMerchantsIDs
     * @return $this
     */
    public function setSelectedMerchantsIDs($selectedMerchantsIDs)
    {
        $this->container['selectedMerchantsIDs'] = $selectedMerchantsIDs;

        return $this;
    }

    /**
     * Gets barcodes
     * @return string[]
     */
    public function getBarcodes()
    {
        return $this->container['barcodes'];
    }

    /**
     * Sets barcodes
     * @param string[] $barcodes
     * @return $this
     */
    public function setBarcodes($barcodes)
    {
        $this->container['barcodes'] = $barcodes;

        return $this;
    }

    /**
     * Gets coupons
     * @return \Swagger\Client\Model\Coupon[]
     */
    public function getCoupons()
    {
        return $this->container['coupons'];
    }

    /**
     * Sets coupons
     * @param \Swagger\Client\Model\Coupon[] $coupons
     * @return $this
     */
    public function setCoupons($coupons)
    {
        $this->container['coupons'] = $coupons;

        return $this;
    }

    /**
     * Gets geoPosition
     * @return \Swagger\Client\Model\Geometry
     */
    public function getGeoPosition()
    {
        return $this->container['geoPosition'];
    }

    /**
     * Sets geoPosition
     * @param \Swagger\Client\Model\Geometry $geoPosition
     * @return $this
     */
    public function setGeoPosition($geoPosition)
    {
        $this->container['geoPosition'] = $geoPosition;

        return $this;
    }

    /**
     * Gets userDefined
     * @return object
     */
    public function getUserDefined()
    {
        return $this->container['userDefined'];
    }

    /**
     * Sets userDefined
     * @param object $userDefined a free form user defined object that includes key - value pairs
     * @return $this
     */
    public function setUserDefined($userDefined)
    {
        $this->container['userDefined'] = $userDefined;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


