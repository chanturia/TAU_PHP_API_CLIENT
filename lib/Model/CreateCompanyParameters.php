<?php
/**
 * CreateCompanyParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CreateCompanyParameters Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateCompanyParameters implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'createCompanyParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_id' => 'string',
        'name' => 'string',
        'in_charge_person_name' => 'string',
        'main_address' => 'string',
        'main_image_url' => 'string',
        'logo_url' => 'string',
        'contact_phone' => 'string',
        'company_type' => 'string',
        'description' => 'string',
        'facebook_page_url' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'userID',
        'name' => 'name',
        'in_charge_person_name' => 'inChargePersonName',
        'main_address' => 'mainAddress',
        'main_image_url' => 'mainImageURL',
        'logo_url' => 'logoURL',
        'contact_phone' => 'contactPhone',
        'company_type' => 'companyType',
        'description' => 'description',
        'facebook_page_url' => 'facebookPageURL'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'name' => 'setName',
        'in_charge_person_name' => 'setInChargePersonName',
        'main_address' => 'setMainAddress',
        'main_image_url' => 'setMainImageUrl',
        'logo_url' => 'setLogoUrl',
        'contact_phone' => 'setContactPhone',
        'company_type' => 'setCompanyType',
        'description' => 'setDescription',
        'facebook_page_url' => 'setFacebookPageUrl'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'name' => 'getName',
        'in_charge_person_name' => 'getInChargePersonName',
        'main_address' => 'getMainAddress',
        'main_image_url' => 'getMainImageUrl',
        'logo_url' => 'getLogoUrl',
        'contact_phone' => 'getContactPhone',
        'company_type' => 'getCompanyType',
        'description' => 'getDescription',
        'facebook_page_url' => 'getFacebookPageUrl'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['in_charge_person_name'] = isset($data['in_charge_person_name']) ? $data['in_charge_person_name'] : null;
        $this->container['main_address'] = isset($data['main_address']) ? $data['main_address'] : null;
        $this->container['main_image_url'] = isset($data['main_image_url']) ? $data['main_image_url'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['contact_phone'] = isset($data['contact_phone']) ? $data['contact_phone'] : null;
        $this->container['company_type'] = isset($data['company_type']) ? $data['company_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['facebook_page_url'] = isset($data['facebook_page_url']) ? $data['facebook_page_url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['user_id'] === null) {
            $invalid_properties[] = "'user_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['in_charge_person_name'] === null) {
            $invalid_properties[] = "'in_charge_person_name' can't be null";
        }
        if ($this->container['main_address'] === null) {
            $invalid_properties[] = "'main_address' can't be null";
        }
        if ($this->container['main_image_url'] === null) {
            $invalid_properties[] = "'main_image_url' can't be null";
        }
        if ($this->container['logo_url'] === null) {
            $invalid_properties[] = "'logo_url' can't be null";
        }
        if ($this->container['contact_phone'] === null) {
            $invalid_properties[] = "'contact_phone' can't be null";
        }
        if ($this->container['company_type'] === null) {
            $invalid_properties[] = "'company_type' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['user_id'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['in_charge_person_name'] === null) {
            return false;
        }
        if ($this->container['main_address'] === null) {
            return false;
        }
        if ($this->container['main_image_url'] === null) {
            return false;
        }
        if ($this->container['logo_url'] === null) {
            return false;
        }
        if ($this->container['contact_phone'] === null) {
            return false;
        }
        if ($this->container['company_type'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets user_id
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     * @param string $user_id
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets in_charge_person_name
     * @return string
     */
    public function getInChargePersonName()
    {
        return $this->container['in_charge_person_name'];
    }

    /**
     * Sets in_charge_person_name
     * @param string $in_charge_person_name
     * @return $this
     */
    public function setInChargePersonName($in_charge_person_name)
    {
        $this->container['in_charge_person_name'] = $in_charge_person_name;

        return $this;
    }

    /**
     * Gets main_address
     * @return string
     */
    public function getMainAddress()
    {
        return $this->container['main_address'];
    }

    /**
     * Sets main_address
     * @param string $main_address
     * @return $this
     */
    public function setMainAddress($main_address)
    {
        $this->container['main_address'] = $main_address;

        return $this;
    }

    /**
     * Gets main_image_url
     * @return string
     */
    public function getMainImageUrl()
    {
        return $this->container['main_image_url'];
    }

    /**
     * Sets main_image_url
     * @param string $main_image_url
     * @return $this
     */
    public function setMainImageUrl($main_image_url)
    {
        $this->container['main_image_url'] = $main_image_url;

        return $this;
    }

    /**
     * Gets logo_url
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     * @param string $logo_url
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets contact_phone
     * @return string
     */
    public function getContactPhone()
    {
        return $this->container['contact_phone'];
    }

    /**
     * Sets contact_phone
     * @param string $contact_phone
     * @return $this
     */
    public function setContactPhone($contact_phone)
    {
        $this->container['contact_phone'] = $contact_phone;

        return $this;
    }

    /**
     * Gets company_type
     * @return string
     */
    public function getCompanyType()
    {
        return $this->container['company_type'];
    }

    /**
     * Sets company_type
     * @param string $company_type
     * @return $this
     */
    public function setCompanyType($company_type)
    {
        $this->container['company_type'] = $company_type;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets facebook_page_url
     * @return string
     */
    public function getFacebookPageUrl()
    {
        return $this->container['facebook_page_url'];
    }

    /**
     * Sets facebook_page_url
     * @param string $facebook_page_url
     * @return $this
     */
    public function setFacebookPageUrl($facebook_page_url)
    {
        $this->container['facebook_page_url'] = $facebook_page_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


