<?php
/**
 * CreateCredentials
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * CreateCredentials Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CreateCredentials implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'createCredentials';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'lastName' => 'string',
        'email' => 'string',
        'password' => 'string',
        'dateOfBirth' => '\DateTime',
        'gender' => 'string',
        'fbID' => 'string',
        'facebookImageURL' => 'string',
        'googleID' => 'string',
        'googleImgURL' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'lastName' => 'lastName',
        'email' => 'email',
        'password' => 'password',
        'dateOfBirth' => 'dateOfBirth',
        'gender' => 'gender',
        'fbID' => 'fbID',
        'facebookImageURL' => 'facebookImageURL',
        'googleID' => 'googleID',
        'googleImgURL' => 'googleImgURL'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'lastName' => 'setLastName',
        'email' => 'setEmail',
        'password' => 'setPassword',
        'dateOfBirth' => 'setDateOfBirth',
        'gender' => 'setGender',
        'fbID' => 'setFbID',
        'facebookImageURL' => 'setFacebookImageURL',
        'googleID' => 'setGoogleID',
        'googleImgURL' => 'setGoogleImgURL'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'lastName' => 'getLastName',
        'email' => 'getEmail',
        'password' => 'getPassword',
        'dateOfBirth' => 'getDateOfBirth',
        'gender' => 'getGender',
        'fbID' => 'getFbID',
        'facebookImageURL' => 'getFacebookImageURL',
        'googleID' => 'getGoogleID',
        'googleImgURL' => 'getGoogleImgURL'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['lastName'] = isset($data['lastName']) ? $data['lastName'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['dateOfBirth'] = isset($data['dateOfBirth']) ? $data['dateOfBirth'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['fbID'] = isset($data['fbID']) ? $data['fbID'] : null;
        $this->container['facebookImageURL'] = isset($data['facebookImageURL']) ? $data['facebookImageURL'] : null;
        $this->container['googleID'] = isset($data['googleID']) ? $data['googleID'] : null;
        $this->container['googleImgURL'] = isset($data['googleImgURL']) ? $data['googleImgURL'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['name'] === null) {
            $invalid_properties[] = "'name' can't be null";
        }
        if ($this->container['lastName'] === null) {
            $invalid_properties[] = "'lastName' can't be null";
        }
        if ($this->container['email'] === null) {
            $invalid_properties[] = "'email' can't be null";
        }
        if ($this->container['password'] === null) {
            $invalid_properties[] = "'password' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['lastName'] === null) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if ($this->container['password'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name User first name must be between 2 and 485 characters and can contain only letters, digits and dashes.
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets lastName
     * @return string
     */
    public function getLastName()
    {
        return $this->container['lastName'];
    }

    /**
     * Sets lastName
     * @param string $lastName User last name must be between 2 and 485 characters and can contain only letters.
     * @return $this
     */
    public function setLastName($lastName)
    {
        $this->container['lastName'] = $lastName;

        return $this;
    }

    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     * @param string $email User email address
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets password
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     * @param string $password User password
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets dateOfBirth
     * @return \DateTime
     */
    public function getDateOfBirth()
    {
        return $this->container['dateOfBirth'];
    }

    /**
     * Sets dateOfBirth
     * @param \DateTime $dateOfBirth User date of birth must be a string representing an RFC2822 or ISO 8601 date
     * @return $this
     */
    public function setDateOfBirth($dateOfBirth)
    {
        $this->container['dateOfBirth'] = $dateOfBirth;

        return $this;
    }

    /**
     * Gets gender
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     * @param string $gender User gender with possible values male/female/other
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets fbID
     * @return string
     */
    public function getFbID()
    {
        return $this->container['fbID'];
    }

    /**
     * Sets fbID
     * @param string $fbID Facebook ID for User to be created with his facebook id
     * @return $this
     */
    public function setFbID($fbID)
    {
        $this->container['fbID'] = $fbID;

        return $this;
    }

    /**
     * Gets facebookImageURL
     * @return string
     */
    public function getFacebookImageURL()
    {
        return $this->container['facebookImageURL'];
    }

    /**
     * Sets facebookImageURL
     * @param string $facebookImageURL Facebook Image URL for User that was created with facebook id
     * @return $this
     */
    public function setFacebookImageURL($facebookImageURL)
    {
        $this->container['facebookImageURL'] = $facebookImageURL;

        return $this;
    }

    /**
     * Gets googleID
     * @return string
     */
    public function getGoogleID()
    {
        return $this->container['googleID'];
    }

    /**
     * Sets googleID
     * @param string $googleID Google ID for User to be created with his google id
     * @return $this
     */
    public function setGoogleID($googleID)
    {
        $this->container['googleID'] = $googleID;

        return $this;
    }

    /**
     * Gets googleImgURL
     * @return string
     */
    public function getGoogleImgURL()
    {
        return $this->container['googleImgURL'];
    }

    /**
     * Sets googleImgURL
     * @param string $googleImgURL Google Image URL for User that was created with Google id
     * @return $this
     */
    public function setGoogleImgURL($googleImgURL)
    {
        $this->container['googleImgURL'] = $googleImgURL;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


