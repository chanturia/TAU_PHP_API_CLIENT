<?php
/**
 * CompanyApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CompanyApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CompanyApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CompanyApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addUserCompanyRoles
     *
     * 
     *
     * @param string $id Required ID for the Company the role is for. (required)
     * @param string $brandID ID of the Brand connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $storeID ID of the Store connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $productID ID of the Product connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $couponID ID of the Coupon connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param \Swagger\Client\Model\CreateCompanyUserRoles $createCompanyUserRoles Company&#39;s User Priveleges Parameters for the company ID and userID. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function addUserCompanyRoles($id, $brandID = null, $storeID = null, $productID = null, $couponID = null, $createCompanyUserRoles = null)
    {
        list($response) = $this->addUserCompanyRolesWithHttpInfo($id, $brandID, $storeID, $productID, $couponID, $createCompanyUserRoles);
        return $response;
    }

    /**
     * Operation addUserCompanyRolesWithHttpInfo
     *
     * 
     *
     * @param string $id Required ID for the Company the role is for. (required)
     * @param string $brandID ID of the Brand connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $storeID ID of the Store connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $productID ID of the Product connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $couponID ID of the Coupon connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param \Swagger\Client\Model\CreateCompanyUserRoles $createCompanyUserRoles Company&#39;s User Priveleges Parameters for the company ID and userID. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserCompanyRolesWithHttpInfo($id, $brandID = null, $storeID = null, $productID = null, $couponID = null, $createCompanyUserRoles = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addUserCompanyRoles');
        }
        // parse inputs
        $resourcePath = "/company/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($brandID !== null) {
            $queryParams['brandID'] = $this->apiClient->getSerializer()->toQueryValue($brandID);
        }
        // query params
        if ($storeID !== null) {
            $queryParams['storeID'] = $this->apiClient->getSerializer()->toQueryValue($storeID);
        }
        // query params
        if ($productID !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($productID);
        }
        // query params
        if ($couponID !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($couponID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($createCompanyUserRoles)) {
            $_tempBody = $createCompanyUserRoles;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/company/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation companyGetDetails
     *
     * 
     *
     * @param string $id ID for the company to find the details for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Company
     */
    public function companyGetDetails($id)
    {
        list($response) = $this->companyGetDetailsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation companyGetDetailsWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the company to find the details for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Company, HTTP status code, HTTP response headers (array of strings)
     */
    public function companyGetDetailsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling companyGetDetails');
        }
        // parse inputs
        $resourcePath = "/company/details/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Company',
                '/company/details/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Company', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Company', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBrandForCompany
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyBrandCreateParameters $companyBrandCreateParameters Brand parameters for creating new brand consisting of User ID, brand name, description, main image URL and logo image URL. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Brand
     */
    public function createBrandForCompany($id, $companyBrandCreateParameters)
    {
        list($response) = $this->createBrandForCompanyWithHttpInfo($id, $companyBrandCreateParameters);
        return $response;
    }

    /**
     * Operation createBrandForCompanyWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyBrandCreateParameters $companyBrandCreateParameters Brand parameters for creating new brand consisting of User ID, brand name, description, main image URL and logo image URL. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Brand, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBrandForCompanyWithHttpInfo($id, $companyBrandCreateParameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createBrandForCompany');
        }
        // verify the required parameter 'companyBrandCreateParameters' is set
        if ($companyBrandCreateParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $companyBrandCreateParameters when calling createBrandForCompany');
        }
        // parse inputs
        $resourcePath = "/company/{id}/brand/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($companyBrandCreateParameters)) {
            $_tempBody = $companyBrandCreateParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Brand',
                '/company/{id}/brand/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Brand', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Brand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCompany
     *
     * 
     *
     * @param \Swagger\Client\Model\CreateCompanyParameters $createCompanyParameters Company Parameters for the company to be created and User ID of User who creates the company. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Company
     */
    public function createCompany($createCompanyParameters)
    {
        list($response) = $this->createCompanyWithHttpInfo($createCompanyParameters);
        return $response;
    }

    /**
     * Operation createCompanyWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\CreateCompanyParameters $createCompanyParameters Company Parameters for the company to be created and User ID of User who creates the company. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Company, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCompanyWithHttpInfo($createCompanyParameters)
    {
        // verify the required parameter 'createCompanyParameters' is set
        if ($createCompanyParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $createCompanyParameters when calling createCompany');
        }
        // parse inputs
        $resourcePath = "/company/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($createCompanyParameters)) {
            $_tempBody = $createCompanyParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Company',
                '/company/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Company', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Company', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCouponForCompany
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyCouponCreateParameters $companyCouponCreateParameters Coupon Parameters and userid who initiated the creation proccess (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Coupon
     */
    public function createCouponForCompany($id, $companyCouponCreateParameters)
    {
        list($response) = $this->createCouponForCompanyWithHttpInfo($id, $companyCouponCreateParameters);
        return $response;
    }

    /**
     * Operation createCouponForCompanyWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyCouponCreateParameters $companyCouponCreateParameters Coupon Parameters and userid who initiated the creation proccess (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponForCompanyWithHttpInfo($id, $companyCouponCreateParameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createCouponForCompany');
        }
        // verify the required parameter 'companyCouponCreateParameters' is set
        if ($companyCouponCreateParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $companyCouponCreateParameters when calling createCouponForCompany');
        }
        // parse inputs
        $resourcePath = "/company/{id}/coupon/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($companyCouponCreateParameters)) {
            $_tempBody = $companyCouponCreateParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/company/{id}/coupon/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductCompany
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyProductCreateParameters $companyProductCreateParameters Product parameters for creating new product (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Product
     */
    public function createProductCompany($id, $companyProductCreateParameters)
    {
        list($response) = $this->createProductCompanyWithHttpInfo($id, $companyProductCreateParameters);
        return $response;
    }

    /**
     * Operation createProductCompanyWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyProductCreateParameters $companyProductCreateParameters Product parameters for creating new product (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductCompanyWithHttpInfo($id, $companyProductCreateParameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createProductCompany');
        }
        // verify the required parameter 'companyProductCreateParameters' is set
        if ($companyProductCreateParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $companyProductCreateParameters when calling createProductCompany');
        }
        // parse inputs
        $resourcePath = "/company/{id}/product/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($companyProductCreateParameters)) {
            $_tempBody = $companyProductCreateParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/company/{id}/product/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createStoreForCompany
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyStoreCreateParameters $companyStoreCreateParameters Store Parameters for the store to be created and User ID of User that creates the store. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Store
     */
    public function createStoreForCompany($id, $companyStoreCreateParameters)
    {
        list($response) = $this->createStoreForCompanyWithHttpInfo($id, $companyStoreCreateParameters);
        return $response;
    }

    /**
     * Operation createStoreForCompanyWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\CompanyStoreCreateParameters $companyStoreCreateParameters Store Parameters for the store to be created and User ID of User that creates the store. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Store, HTTP status code, HTTP response headers (array of strings)
     */
    public function createStoreForCompanyWithHttpInfo($id, $companyStoreCreateParameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createStoreForCompany');
        }
        // verify the required parameter 'companyStoreCreateParameters' is set
        if ($companyStoreCreateParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $companyStoreCreateParameters when calling createStoreForCompany');
        }
        // parse inputs
        $resourcePath = "/company/{id}/store/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($companyStoreCreateParameters)) {
            $_tempBody = $companyStoreCreateParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Store',
                '/company/{id}/store/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Store', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Store', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeAdminUserCompany
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\DeleteCompanyUserRoles $deleteCompanyUserRoles Company&#39;s User ID and privileges to be removed for the company ID. (required)
     * @param string $brandID ID of the Brand connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $storeID ID of the Store connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $productID ID of the Product connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $couponID ID of the Coupon connected with the Company (only required for Authorization for the User making the request) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function removeAdminUserCompany($id, $deleteCompanyUserRoles, $brandID = null, $storeID = null, $productID = null, $couponID = null)
    {
        list($response) = $this->removeAdminUserCompanyWithHttpInfo($id, $deleteCompanyUserRoles, $brandID, $storeID, $productID, $couponID);
        return $response;
    }

    /**
     * Operation removeAdminUserCompanyWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Company (required)
     * @param \Swagger\Client\Model\DeleteCompanyUserRoles $deleteCompanyUserRoles Company&#39;s User ID and privileges to be removed for the company ID. (required)
     * @param string $brandID ID of the Brand connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $storeID ID of the Store connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $productID ID of the Product connected with the Company (only required for Authorization for the User making the request) (optional)
     * @param string $couponID ID of the Coupon connected with the Company (only required for Authorization for the User making the request) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeAdminUserCompanyWithHttpInfo($id, $deleteCompanyUserRoles, $brandID = null, $storeID = null, $productID = null, $couponID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeAdminUserCompany');
        }
        // verify the required parameter 'deleteCompanyUserRoles' is set
        if ($deleteCompanyUserRoles === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deleteCompanyUserRoles when calling removeAdminUserCompany');
        }
        // parse inputs
        $resourcePath = "/company/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($brandID !== null) {
            $queryParams['brandID'] = $this->apiClient->getSerializer()->toQueryValue($brandID);
        }
        // query params
        if ($storeID !== null) {
            $queryParams['storeID'] = $this->apiClient->getSerializer()->toQueryValue($storeID);
        }
        // query params
        if ($productID !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($productID);
        }
        // query params
        if ($couponID !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($couponID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($deleteCompanyUserRoles)) {
            $_tempBody = $deleteCompanyUserRoles;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/company/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCompany
     *
     * 
     *
     * @param string $id ID for the company to be updated. (required)
     * @param \Swagger\Client\Model\UpdateCompanyParameters $updateCompanyParameters Company Parameters for the company to be updated and User ID for the User who makes the update. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CompanyID
     */
    public function updateCompany($id, $updateCompanyParameters)
    {
        list($response) = $this->updateCompanyWithHttpInfo($id, $updateCompanyParameters);
        return $response;
    }

    /**
     * Operation updateCompanyWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the company to be updated. (required)
     * @param \Swagger\Client\Model\UpdateCompanyParameters $updateCompanyParameters Company Parameters for the company to be updated and User ID for the User who makes the update. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CompanyID, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCompanyWithHttpInfo($id, $updateCompanyParameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateCompany');
        }
        // verify the required parameter 'updateCompanyParameters' is set
        if ($updateCompanyParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $updateCompanyParameters when calling updateCompany');
        }
        // parse inputs
        $resourcePath = "/company/details/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($updateCompanyParameters)) {
            $_tempBody = $updateCompanyParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CompanyID',
                '/company/details/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CompanyID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CompanyID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
