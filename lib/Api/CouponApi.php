<?php
/**
 * CouponApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * CouponApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CouponApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return CouponApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addUserCoupon
     *
     * 
     *
     * @param string $id ID for the Coupon (required)
     * @param \Swagger\Client\Model\CreateCouponUserRole $create_coupon_user_role Coupon&#39;s User Priveleges Parameters for the couponID and UserID. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function addUserCoupon($id, $create_coupon_user_role)
    {
        list($response) = $this->addUserCouponWithHttpInfo($id, $create_coupon_user_role);
        return $response;
    }

    /**
     * Operation addUserCouponWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Coupon (required)
     * @param \Swagger\Client\Model\CreateCouponUserRole $create_coupon_user_role Coupon&#39;s User Priveleges Parameters for the couponID and UserID. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserCouponWithHttpInfo($id, $create_coupon_user_role)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addUserCoupon');
        }
        // verify the required parameter 'create_coupon_user_role' is set
        if ($create_coupon_user_role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_coupon_user_role when calling addUserCoupon');
        }
        // parse inputs
        $resourcePath = "/coupon/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_coupon_user_role)) {
            $_tempBody = $create_coupon_user_role;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/coupon/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation allCouponCategories
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponCategory
     */
    public function allCouponCategories()
    {
        list($response) = $this->allCouponCategoriesWithHttpInfo();
        return $response;
    }

    /**
     * Operation allCouponCategoriesWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function allCouponCategoriesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/coupon/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponCategory',
                '/coupon/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation allCouponPrimitives
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponPrimitive
     */
    public function allCouponPrimitives()
    {
        list($response) = $this->allCouponPrimitivesWithHttpInfo();
        return $response;
    }

    /**
     * Operation allCouponPrimitivesWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponPrimitive, HTTP status code, HTTP response headers (array of strings)
     */
    public function allCouponPrimitivesWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/coupon/primitive/all";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponPrimitive',
                '/coupon/primitive/all'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponPrimitive', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponPrimitive', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changeUserCouponPrivileges
     *
     * 
     *
     * @param string $id ID for the Coupon (required)
     * @param \Swagger\Client\Model\UpdateCouponUserRole $update_coupon_user_role Store&#39;s User Role Parameters for the CouponID and UserID. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function changeUserCouponPrivileges($id, $update_coupon_user_role)
    {
        list($response) = $this->changeUserCouponPrivilegesWithHttpInfo($id, $update_coupon_user_role);
        return $response;
    }

    /**
     * Operation changeUserCouponPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Coupon (required)
     * @param \Swagger\Client\Model\UpdateCouponUserRole $update_coupon_user_role Store&#39;s User Role Parameters for the CouponID and UserID. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeUserCouponPrivilegesWithHttpInfo($id, $update_coupon_user_role)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling changeUserCouponPrivileges');
        }
        // verify the required parameter 'update_coupon_user_role' is set
        if ($update_coupon_user_role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_coupon_user_role when calling changeUserCouponPrivileges');
        }
        // parse inputs
        $resourcePath = "/coupon/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_coupon_user_role)) {
            $_tempBody = $update_coupon_user_role;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/coupon/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation couponCategoryCreate
     *
     * 
     *
     * @param \Swagger\Client\Model\CreateCouponCategoryParameters $create_coupon_category_parameters CouponCategory parameters for creating new category consisting of category name, description and subcategories. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponCategory
     */
    public function couponCategoryCreate($create_coupon_category_parameters)
    {
        list($response) = $this->couponCategoryCreateWithHttpInfo($create_coupon_category_parameters);
        return $response;
    }

    /**
     * Operation couponCategoryCreateWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\CreateCouponCategoryParameters $create_coupon_category_parameters CouponCategory parameters for creating new category consisting of category name, description and subcategories. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function couponCategoryCreateWithHttpInfo($create_coupon_category_parameters)
    {
        // verify the required parameter 'create_coupon_category_parameters' is set
        if ($create_coupon_category_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_coupon_category_parameters when calling couponCategoryCreate');
        }
        // parse inputs
        $resourcePath = "/coupon/category/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_coupon_category_parameters)) {
            $_tempBody = $create_coupon_category_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponCategory',
                '/coupon/category/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCoupon
     *
     * 
     *
     * @param \Swagger\Client\Model\CreateCouponParameters $create_coupon_parameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Coupon
     */
    public function createCoupon($create_coupon_parameters)
    {
        list($response) = $this->createCouponWithHttpInfo($create_coupon_parameters);
        return $response;
    }

    /**
     * Operation createCouponWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\CreateCouponParameters $create_coupon_parameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponWithHttpInfo($create_coupon_parameters)
    {
        // verify the required parameter 'create_coupon_parameters' is set
        if ($create_coupon_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_coupon_parameters when calling createCoupon');
        }
        // parse inputs
        $resourcePath = "/coupon/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_coupon_parameters)) {
            $_tempBody = $create_coupon_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/coupon/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCouponPrimitive
     *
     * 
     *
     * @param \Swagger\Client\Model\PrimitiveParameters $primitive_parameters Coupon Primitive parameters including primitive name, description and primitive validator URL, validator inputs and validator outputs. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponPrimitive
     */
    public function createCouponPrimitive($primitive_parameters)
    {
        list($response) = $this->createCouponPrimitiveWithHttpInfo($primitive_parameters);
        return $response;
    }

    /**
     * Operation createCouponPrimitiveWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\PrimitiveParameters $primitive_parameters Coupon Primitive parameters including primitive name, description and primitive validator URL, validator inputs and validator outputs. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponPrimitive, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponPrimitiveWithHttpInfo($primitive_parameters)
    {
        // verify the required parameter 'primitive_parameters' is set
        if ($primitive_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $primitive_parameters when calling createCouponPrimitive');
        }
        // parse inputs
        $resourcePath = "/coupon/primitive/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($primitive_parameters)) {
            $_tempBody = $primitive_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponPrimitive',
                '/coupon/primitive/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponPrimitive', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponPrimitive', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation editCouponCategory
     *
     * 
     *
     * @param string $coupon_category_id ID for the Coupon Category to be updated. (required)
     * @param \Swagger\Client\Model\UpdateCouponCategoryParameters $update_coupon_category_parameters Coupon Category parameters consisting of category id, name, description and subcategories. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponCategoryID
     */
    public function editCouponCategory($coupon_category_id, $update_coupon_category_parameters)
    {
        list($response) = $this->editCouponCategoryWithHttpInfo($coupon_category_id, $update_coupon_category_parameters);
        return $response;
    }

    /**
     * Operation editCouponCategoryWithHttpInfo
     *
     * 
     *
     * @param string $coupon_category_id ID for the Coupon Category to be updated. (required)
     * @param \Swagger\Client\Model\UpdateCouponCategoryParameters $update_coupon_category_parameters Coupon Category parameters consisting of category id, name, description and subcategories. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponCategoryID, HTTP status code, HTTP response headers (array of strings)
     */
    public function editCouponCategoryWithHttpInfo($coupon_category_id, $update_coupon_category_parameters)
    {
        // verify the required parameter 'coupon_category_id' is set
        if ($coupon_category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $coupon_category_id when calling editCouponCategory');
        }
        // verify the required parameter 'update_coupon_category_parameters' is set
        if ($update_coupon_category_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_coupon_category_parameters when calling editCouponCategory');
        }
        // parse inputs
        $resourcePath = "/coupon/category/{couponCategoryID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($coupon_category_id !== null) {
            $resourcePath = str_replace(
                "{" . "couponCategoryID" . "}",
                $this->apiClient->getSerializer()->toPathValue($coupon_category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_coupon_category_parameters)) {
            $_tempBody = $update_coupon_category_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponCategoryID',
                '/coupon/category/{couponCategoryID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponCategoryID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponCategoryID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation editCouponPrimitive
     *
     * 
     *
     * @param string $primitive_id ID for the Coupon Primitive to be updated. (required)
     * @param \Swagger\Client\Model\CouponPrimitiveParameters $coupon_primitive_parameters Coupon Primitive parameters including primitive id and primitive name, description, validator URL, validator inputs and validator outputs. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponPrimitiveID
     */
    public function editCouponPrimitive($primitive_id, $coupon_primitive_parameters)
    {
        list($response) = $this->editCouponPrimitiveWithHttpInfo($primitive_id, $coupon_primitive_parameters);
        return $response;
    }

    /**
     * Operation editCouponPrimitiveWithHttpInfo
     *
     * 
     *
     * @param string $primitive_id ID for the Coupon Primitive to be updated. (required)
     * @param \Swagger\Client\Model\CouponPrimitiveParameters $coupon_primitive_parameters Coupon Primitive parameters including primitive id and primitive name, description, validator URL, validator inputs and validator outputs. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponPrimitiveID, HTTP status code, HTTP response headers (array of strings)
     */
    public function editCouponPrimitiveWithHttpInfo($primitive_id, $coupon_primitive_parameters)
    {
        // verify the required parameter 'primitive_id' is set
        if ($primitive_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $primitive_id when calling editCouponPrimitive');
        }
        // verify the required parameter 'coupon_primitive_parameters' is set
        if ($coupon_primitive_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $coupon_primitive_parameters when calling editCouponPrimitive');
        }
        // parse inputs
        $resourcePath = "/coupon/primitive/{primitiveID}/details";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($primitive_id !== null) {
            $resourcePath = str_replace(
                "{" . "primitiveID" . "}",
                $this->apiClient->getSerializer()->toPathValue($primitive_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($coupon_primitive_parameters)) {
            $_tempBody = $coupon_primitive_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponPrimitiveID',
                '/coupon/primitive/{primitiveID}/details'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponPrimitiveID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponPrimitiveID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCouponById
     *
     * 
     *
     * @param string $id ID for the coupon being searched for. (required)
     * @param string $company_parameter Company ID Parameter for the company that the Coupon is connected to.Required only if the Coupon is connected with a company. (optional)
     * @param string $brand_parameter Brand ID Parameter for the Brand that the Coupon is connected to.Required only if the Coupon is connected with a Brand. (optional)
     * @param string $store_parameter Store ID Parameter for the Store that the Coupon is connected to.Required only if the Coupon is connected with a Store. (optional)
     * @param string $merchant_parameter Merchant ID Parameter for the Merchant that the Coupon is connected to.Required only if the Coupon is connected with a Merchant. (optional)
     * @param string $product_parameter Product ID Parameter for the Product that the Coupon is connected to.Required only if the Coupon is connected with a Product. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Coupon
     */
    public function getCouponById($id, $company_parameter = null, $brand_parameter = null, $store_parameter = null, $merchant_parameter = null, $product_parameter = null)
    {
        list($response) = $this->getCouponByIdWithHttpInfo($id, $company_parameter, $brand_parameter, $store_parameter, $merchant_parameter, $product_parameter);
        return $response;
    }

    /**
     * Operation getCouponByIdWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the coupon being searched for. (required)
     * @param string $company_parameter Company ID Parameter for the company that the Coupon is connected to.Required only if the Coupon is connected with a company. (optional)
     * @param string $brand_parameter Brand ID Parameter for the Brand that the Coupon is connected to.Required only if the Coupon is connected with a Brand. (optional)
     * @param string $store_parameter Store ID Parameter for the Store that the Coupon is connected to.Required only if the Coupon is connected with a Store. (optional)
     * @param string $merchant_parameter Merchant ID Parameter for the Merchant that the Coupon is connected to.Required only if the Coupon is connected with a Merchant. (optional)
     * @param string $product_parameter Product ID Parameter for the Product that the Coupon is connected to.Required only if the Coupon is connected with a Product. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponByIdWithHttpInfo($id, $company_parameter = null, $brand_parameter = null, $store_parameter = null, $merchant_parameter = null, $product_parameter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getCouponById');
        }
        // parse inputs
        $resourcePath = "/coupon/{id}/details";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($company_parameter !== null) {
            $queryParams['companyParameter'] = $this->apiClient->getSerializer()->toQueryValue($company_parameter);
        }
        // query params
        if ($brand_parameter !== null) {
            $queryParams['brandParameter'] = $this->apiClient->getSerializer()->toQueryValue($brand_parameter);
        }
        // query params
        if ($store_parameter !== null) {
            $queryParams['storeParameter'] = $this->apiClient->getSerializer()->toQueryValue($store_parameter);
        }
        // query params
        if ($merchant_parameter !== null) {
            $queryParams['merchantParameter'] = $this->apiClient->getSerializer()->toQueryValue($merchant_parameter);
        }
        // query params
        if ($product_parameter !== null) {
            $queryParams['productParameter'] = $this->apiClient->getSerializer()->toQueryValue($product_parameter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/coupon/{id}/details'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCouponCategoryById
     *
     * 
     *
     * @param string $coupon_category_id ID for the Coupon Category being searched for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponCategory
     */
    public function getCouponCategoryById($coupon_category_id)
    {
        list($response) = $this->getCouponCategoryByIdWithHttpInfo($coupon_category_id);
        return $response;
    }

    /**
     * Operation getCouponCategoryByIdWithHttpInfo
     *
     * 
     *
     * @param string $coupon_category_id ID for the Coupon Category being searched for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponCategory, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponCategoryByIdWithHttpInfo($coupon_category_id)
    {
        // verify the required parameter 'coupon_category_id' is set
        if ($coupon_category_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $coupon_category_id when calling getCouponCategoryById');
        }
        // parse inputs
        $resourcePath = "/coupon/category/{couponCategoryID}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($coupon_category_id !== null) {
            $resourcePath = str_replace(
                "{" . "couponCategoryID" . "}",
                $this->apiClient->getSerializer()->toPathValue($coupon_category_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponCategory',
                '/coupon/category/{couponCategoryID}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponCategory', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponCategory', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCouponPrimitiveById
     *
     * 
     *
     * @param string $primitive_id ID for the Coupon Primitive being searched for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponPrimitive
     */
    public function getCouponPrimitiveById($primitive_id)
    {
        list($response) = $this->getCouponPrimitiveByIdWithHttpInfo($primitive_id);
        return $response;
    }

    /**
     * Operation getCouponPrimitiveByIdWithHttpInfo
     *
     * 
     *
     * @param string $primitive_id ID for the Coupon Primitive being searched for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponPrimitive, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponPrimitiveByIdWithHttpInfo($primitive_id)
    {
        // verify the required parameter 'primitive_id' is set
        if ($primitive_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $primitive_id when calling getCouponPrimitiveById');
        }
        // parse inputs
        $resourcePath = "/coupon/primitive/{primitiveID}/details";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($primitive_id !== null) {
            $resourcePath = str_replace(
                "{" . "primitiveID" . "}",
                $this->apiClient->getSerializer()->toPathValue($primitive_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponPrimitive',
                '/coupon/primitive/{primitiveID}/details'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponPrimitive', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponPrimitive', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCouponTerms
     *
     * 
     *
     * @param string $id ID for the coupon being searched for (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponTerms
     */
    public function getCouponTerms($id)
    {
        list($response) = $this->getCouponTermsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCouponTermsWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the coupon being searched for (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponTerms, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponTermsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getCouponTerms');
        }
        // parse inputs
        $resourcePath = "/coupon/{id}/terms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponTerms',
                '/coupon/{id}/terms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponTerms', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponTerms', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeUserCouponPrivileges
     *
     * 
     *
     * @param string $id ID for the Coupon (required)
     * @param \Swagger\Client\Model\DeleteCouponUserRole $delete_coupon_user_role Coupons User ID and Role to be removed  for the coupon ID. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function removeUserCouponPrivileges($id, $delete_coupon_user_role)
    {
        list($response) = $this->removeUserCouponPrivilegesWithHttpInfo($id, $delete_coupon_user_role);
        return $response;
    }

    /**
     * Operation removeUserCouponPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Coupon (required)
     * @param \Swagger\Client\Model\DeleteCouponUserRole $delete_coupon_user_role Coupons User ID and Role to be removed  for the coupon ID. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeUserCouponPrivilegesWithHttpInfo($id, $delete_coupon_user_role)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeUserCouponPrivileges');
        }
        // verify the required parameter 'delete_coupon_user_role' is set
        if ($delete_coupon_user_role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $delete_coupon_user_role when calling removeUserCouponPrivileges');
        }
        // parse inputs
        $resourcePath = "/coupon/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($delete_coupon_user_role)) {
            $_tempBody = $delete_coupon_user_role;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/coupon/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation setCouponTerms
     *
     * 
     *
     * @param string $id ID for the coupon being searched for (required)
     * @param \Swagger\Client\Model\SetCouponTermsParameters $set_coupon_terms_parameters Coupon Parameters for the coupon to be updated (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Coupon
     */
    public function setCouponTerms($id, $set_coupon_terms_parameters)
    {
        list($response) = $this->setCouponTermsWithHttpInfo($id, $set_coupon_terms_parameters);
        return $response;
    }

    /**
     * Operation setCouponTermsWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the coupon being searched for (required)
     * @param \Swagger\Client\Model\SetCouponTermsParameters $set_coupon_terms_parameters Coupon Parameters for the coupon to be updated (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function setCouponTermsWithHttpInfo($id, $set_coupon_terms_parameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling setCouponTerms');
        }
        // verify the required parameter 'set_coupon_terms_parameters' is set
        if ($set_coupon_terms_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $set_coupon_terms_parameters when calling setCouponTerms');
        }
        // parse inputs
        $resourcePath = "/coupon/{id}/terms";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($set_coupon_terms_parameters)) {
            $_tempBody = $set_coupon_terms_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/coupon/{id}/terms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCoupon
     *
     * 
     *
     * @param string $id ID for the coupon to be updated. (required)
     * @param \Swagger\Client\Model\UpdateCouponParameters $update_coupon_parameters Coupon Parameters consisting of coupon id, userid who initiated the update proccess, name, description, kind, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @param string $company_parameter Company ID Parameter for the company that the Coupon is connected to.Required only if the Coupon is connected with a company. (optional)
     * @param string $brand_parameter Brand ID Parameter for the Brand that the Coupon is connected to.Required only if the Coupon is connected with a Brand. (optional)
     * @param string $store_parameter Store ID Parameter for the Store that the Coupon is connected to.Required only if the Coupon is connected with a Store. (optional)
     * @param string $merchant_parameter Merchant ID Parameter for the Merchant that the Coupon is connected to.Required only if the Coupon is connected with a Merchant. (optional)
     * @param string $product_parameter Product ID Parameter for the Product that the Coupon is connected to.Required only if the Coupon is connected with a Product. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CouponID
     */
    public function updateCoupon($id, $update_coupon_parameters, $company_parameter = null, $brand_parameter = null, $store_parameter = null, $merchant_parameter = null, $product_parameter = null)
    {
        list($response) = $this->updateCouponWithHttpInfo($id, $update_coupon_parameters, $company_parameter, $brand_parameter, $store_parameter, $merchant_parameter, $product_parameter);
        return $response;
    }

    /**
     * Operation updateCouponWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the coupon to be updated. (required)
     * @param \Swagger\Client\Model\UpdateCouponParameters $update_coupon_parameters Coupon Parameters consisting of coupon id, userid who initiated the update proccess, name, description, kind, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @param string $company_parameter Company ID Parameter for the company that the Coupon is connected to.Required only if the Coupon is connected with a company. (optional)
     * @param string $brand_parameter Brand ID Parameter for the Brand that the Coupon is connected to.Required only if the Coupon is connected with a Brand. (optional)
     * @param string $store_parameter Store ID Parameter for the Store that the Coupon is connected to.Required only if the Coupon is connected with a Store. (optional)
     * @param string $merchant_parameter Merchant ID Parameter for the Merchant that the Coupon is connected to.Required only if the Coupon is connected with a Merchant. (optional)
     * @param string $product_parameter Product ID Parameter for the Product that the Coupon is connected to.Required only if the Coupon is connected with a Product. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CouponID, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCouponWithHttpInfo($id, $update_coupon_parameters, $company_parameter = null, $brand_parameter = null, $store_parameter = null, $merchant_parameter = null, $product_parameter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateCoupon');
        }
        // verify the required parameter 'update_coupon_parameters' is set
        if ($update_coupon_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_coupon_parameters when calling updateCoupon');
        }
        // parse inputs
        $resourcePath = "/coupon/{id}/details";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($company_parameter !== null) {
            $queryParams['companyParameter'] = $this->apiClient->getSerializer()->toQueryValue($company_parameter);
        }
        // query params
        if ($brand_parameter !== null) {
            $queryParams['brandParameter'] = $this->apiClient->getSerializer()->toQueryValue($brand_parameter);
        }
        // query params
        if ($store_parameter !== null) {
            $queryParams['storeParameter'] = $this->apiClient->getSerializer()->toQueryValue($store_parameter);
        }
        // query params
        if ($merchant_parameter !== null) {
            $queryParams['merchantParameter'] = $this->apiClient->getSerializer()->toQueryValue($merchant_parameter);
        }
        // query params
        if ($product_parameter !== null) {
            $queryParams['productParameter'] = $this->apiClient->getSerializer()->toQueryValue($product_parameter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_coupon_parameters)) {
            $_tempBody = $update_coupon_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CouponID',
                '/coupon/{id}/details'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CouponID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CouponID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
