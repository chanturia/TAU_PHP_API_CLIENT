<?php
/**
 * BrandApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * BrandApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BrandApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('http://api.trustanduse.7indigo.website/api/v1');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BrandApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addUserBrand
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\CreateBrandUserRoles $create_brand_user_roles Brand&#39;s User Priveleges Parameters for the brand ID and UserID. (required)
     * @param string $product_id ID of the Product connected with the Brand (optional)
     * @param string $coupon_id ID of the Coupon connected with the Brand (optional)
     * @return \Swagger\Client\Model\UserID
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addUserBrand($id, $create_brand_user_roles, $product_id = null, $coupon_id = null)
    {
        list($response) = $this->addUserBrandWithHttpInfo($id, $create_brand_user_roles, $product_id, $coupon_id);
        return $response;
    }

    /**
     * Operation addUserBrandWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\CreateBrandUserRoles $create_brand_user_roles Brand&#39;s User Priveleges Parameters for the brand ID and UserID. (required)
     * @param string $product_id ID of the Product connected with the Brand (optional)
     * @param string $coupon_id ID of the Coupon connected with the Brand (optional)
     * @return Array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addUserBrandWithHttpInfo($id, $create_brand_user_roles, $product_id = null, $coupon_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addUserBrand');
        }
        // verify the required parameter 'create_brand_user_roles' is set
        if ($create_brand_user_roles === null) {
            throw new \InvalidArgumentException('Missing the required parameter $create_brand_user_roles when calling addUserBrand');
        }
        // parse inputs
        $resourcePath = "/brand/{id}/user";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($product_id !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($coupon_id !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($coupon_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_brand_user_roles)) {
            $_tempBody = $create_brand_user_roles;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/brand/{id}/user'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation allBrands
     *
     * 
     *
     * @return \Swagger\Client\Model\Brand
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function allBrands()
    {
        list($response) = $this->allBrandsWithHttpInfo();
        return $response;
    }

    /**
     * Operation allBrandsWithHttpInfo
     *
     * 
     *
     * @return Array of \Swagger\Client\Model\Brand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function allBrandsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/brand/all";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Brand',
                '/brand/all'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Brand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Brand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changeUserBrandPrivileges
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\UpdateBrandUserRoles $update_brand_user_roles Brand&#39;s User Priveleges Parameters for the Store ID and UserID. (required)
     * @param string $product_id ID of the Product connected with the Brand (optional)
     * @param string $coupon_id ID of the Coupon connected with the Brand (optional)
     * @return \Swagger\Client\Model\UserID
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function changeUserBrandPrivileges($id, $update_brand_user_roles, $product_id = null, $coupon_id = null)
    {
        list($response) = $this->changeUserBrandPrivilegesWithHttpInfo($id, $update_brand_user_roles, $product_id, $coupon_id);
        return $response;
    }

    /**
     * Operation changeUserBrandPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\UpdateBrandUserRoles $update_brand_user_roles Brand&#39;s User Priveleges Parameters for the Store ID and UserID. (required)
     * @param string $product_id ID of the Product connected with the Brand (optional)
     * @param string $coupon_id ID of the Coupon connected with the Brand (optional)
     * @return Array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function changeUserBrandPrivilegesWithHttpInfo($id, $update_brand_user_roles, $product_id = null, $coupon_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling changeUserBrandPrivileges');
        }
        // verify the required parameter 'update_brand_user_roles' is set
        if ($update_brand_user_roles === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_brand_user_roles when calling changeUserBrandPrivileges');
        }
        // parse inputs
        $resourcePath = "/brand/{id}/user";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($product_id !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($coupon_id !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($coupon_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_brand_user_roles)) {
            $_tempBody = $update_brand_user_roles;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/brand/{id}/user'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createBrand
     *
     * 
     *
     * @param \Swagger\Client\Model\BrandCreateParameters $brand_create_parameters Brand parameters for creating new brand consisting of User ID, brand name, description, main image URL and logo image URL. (required)
     * @return \Swagger\Client\Model\Brand
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createBrand($brand_create_parameters)
    {
        list($response) = $this->createBrandWithHttpInfo($brand_create_parameters);
        return $response;
    }

    /**
     * Operation createBrandWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\BrandCreateParameters $brand_create_parameters Brand parameters for creating new brand consisting of User ID, brand name, description, main image URL and logo image URL. (required)
     * @return Array of \Swagger\Client\Model\Brand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createBrandWithHttpInfo($brand_create_parameters)
    {
        // verify the required parameter 'brand_create_parameters' is set
        if ($brand_create_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_create_parameters when calling createBrand');
        }
        // parse inputs
        $resourcePath = "/brand/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand_create_parameters)) {
            $_tempBody = $brand_create_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Brand',
                '/brand/create'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Brand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Brand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCouponBrand
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\BrandCouponCreateParameters $brand_coupon_create_parameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @return \Swagger\Client\Model\Coupon
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCouponBrand($id, $brand_coupon_create_parameters)
    {
        list($response) = $this->createCouponBrandWithHttpInfo($id, $brand_coupon_create_parameters);
        return $response;
    }

    /**
     * Operation createCouponBrandWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\BrandCouponCreateParameters $brand_coupon_create_parameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @return Array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createCouponBrandWithHttpInfo($id, $brand_coupon_create_parameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createCouponBrand');
        }
        // verify the required parameter 'brand_coupon_create_parameters' is set
        if ($brand_coupon_create_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_coupon_create_parameters when calling createCouponBrand');
        }
        // parse inputs
        $resourcePath = "/brand/{id}/coupon/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand_coupon_create_parameters)) {
            $_tempBody = $brand_coupon_create_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/brand/{id}/coupon/create'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductBrand
     *
     * 
     *
     * @param string $id ID for the brand (required)
     * @param \Swagger\Client\Model\BrandProductCreateParameters $brand_product_create_parameters Product parameters for creating new product consisting of product type, name, description, brandID, images and optionally merchantids. (required)
     * @return \Swagger\Client\Model\Product
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createProductBrand($id, $brand_product_create_parameters)
    {
        list($response) = $this->createProductBrandWithHttpInfo($id, $brand_product_create_parameters);
        return $response;
    }

    /**
     * Operation createProductBrandWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the brand (required)
     * @param \Swagger\Client\Model\BrandProductCreateParameters $brand_product_create_parameters Product parameters for creating new product consisting of product type, name, description, brandID, images and optionally merchantids. (required)
     * @return Array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function createProductBrandWithHttpInfo($id, $brand_product_create_parameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createProductBrand');
        }
        // verify the required parameter 'brand_product_create_parameters' is set
        if ($brand_product_create_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_product_create_parameters when calling createProductBrand');
        }
        // parse inputs
        $resourcePath = "/brand/{id}/product/create";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand_product_create_parameters)) {
            $_tempBody = $brand_product_create_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/brand/{id}/product/create'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBrandDetails
     *
     * 
     *
     * @param string $id ID for the Brand being searched for. (required)
     * @param string $company_parameter Company ID Parameter for the company that the brand is connected to.Required only if the brand is connected with a company. (optional)
     * @return \Swagger\Client\Model\Brand
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBrandDetails($id, $company_parameter = null)
    {
        list($response) = $this->getBrandDetailsWithHttpInfo($id, $company_parameter);
        return $response;
    }

    /**
     * Operation getBrandDetailsWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Brand being searched for. (required)
     * @param string $company_parameter Company ID Parameter for the company that the brand is connected to.Required only if the brand is connected with a company. (optional)
     * @return Array of \Swagger\Client\Model\Brand, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBrandDetailsWithHttpInfo($id, $company_parameter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getBrandDetails');
        }
        // parse inputs
        $resourcePath = "/brand/details/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($company_parameter !== null) {
            $queryParams['companyParameter'] = $this->apiClient->getSerializer()->toQueryValue($company_parameter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Brand',
                '/brand/details/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Brand', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Brand', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getBrandProducts
     *
     * 
     *
     * @param string $id ID for the Brand to find the products for. (required)
     * @return \Swagger\Client\Model\Product
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBrandProducts($id)
    {
        list($response) = $this->getBrandProductsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getBrandProductsWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Brand to find the products for. (required)
     * @return Array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getBrandProductsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getBrandProducts');
        }
        // parse inputs
        $resourcePath = "/brand/{id}/products";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/brand/{id}/products'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeUserBrandPrivileges
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\DeleteBrandUserRoles $delete_brand_user_roles Brand&#39;s User ID and privileges to be removed  for the brand ID. (required)
     * @param string $product_id ID of the Product connected with the Brand (optional)
     * @param string $coupon_id ID of the Coupon connected with the Brand (optional)
     * @return \Swagger\Client\Model\UserID
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeUserBrandPrivileges($id, $delete_brand_user_roles, $product_id = null, $coupon_id = null)
    {
        list($response) = $this->removeUserBrandPrivilegesWithHttpInfo($id, $delete_brand_user_roles, $product_id, $coupon_id);
        return $response;
    }

    /**
     * Operation removeUserBrandPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Brand (required)
     * @param \Swagger\Client\Model\DeleteBrandUserRoles $delete_brand_user_roles Brand&#39;s User ID and privileges to be removed  for the brand ID. (required)
     * @param string $product_id ID of the Product connected with the Brand (optional)
     * @param string $coupon_id ID of the Coupon connected with the Brand (optional)
     * @return Array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function removeUserBrandPrivilegesWithHttpInfo($id, $delete_brand_user_roles, $product_id = null, $coupon_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeUserBrandPrivileges');
        }
        // verify the required parameter 'delete_brand_user_roles' is set
        if ($delete_brand_user_roles === null) {
            throw new \InvalidArgumentException('Missing the required parameter $delete_brand_user_roles when calling removeUserBrandPrivileges');
        }
        // parse inputs
        $resourcePath = "/brand/{id}/user";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($product_id !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($coupon_id !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($coupon_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($delete_brand_user_roles)) {
            $_tempBody = $delete_brand_user_roles;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/brand/{id}/user'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBrand
     *
     * 
     *
     * @param string $id ID for the Brand to be updated. (required)
     * @param \Swagger\Client\Model\BrandUpdateDetailsParameters $brand_update_details_parameters Brand Parameters for the brand to be updated and User ID for the User who makes the update. (required)
     * @param string $company_parameter Company ID Parameter for the company that the brand is connected to.Required only if the brand is connected with a company. (optional)
     * @return \Swagger\Client\Model\BrandID
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateBrand($id, $brand_update_details_parameters, $company_parameter = null)
    {
        list($response) = $this->updateBrandWithHttpInfo($id, $brand_update_details_parameters, $company_parameter);
        return $response;
    }

    /**
     * Operation updateBrandWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Brand to be updated. (required)
     * @param \Swagger\Client\Model\BrandUpdateDetailsParameters $brand_update_details_parameters Brand Parameters for the brand to be updated and User ID for the User who makes the update. (required)
     * @param string $company_parameter Company ID Parameter for the company that the brand is connected to.Required only if the brand is connected with a company. (optional)
     * @return Array of \Swagger\Client\Model\BrandID, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateBrandWithHttpInfo($id, $brand_update_details_parameters, $company_parameter = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateBrand');
        }
        // verify the required parameter 'brand_update_details_parameters' is set
        if ($brand_update_details_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $brand_update_details_parameters when calling updateBrand');
        }
        // parse inputs
        $resourcePath = "/brand/details/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($company_parameter !== null) {
            $queryParams['companyParameter'] = $this->apiClient->getSerializer()->toQueryValue($company_parameter);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($brand_update_details_parameters)) {
            $_tempBody = $brand_update_details_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BrandID',
                '/brand/details/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BrandID', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BrandID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
