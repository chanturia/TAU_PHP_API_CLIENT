<?php
/**
 * MerchantApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * MerchantApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MerchantApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return MerchantApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addUserMerchantPrivileges
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @param string $product_id ID of the Product connected with the Company (optional)
     * @param string $coupon_id ID of the Coupon connected with the Company (optional)
     * @param \Swagger\Client\Model\CreateMerchantUserRole $create_merchant_user_role Merchant&#39;s User Priveleges Parameters for the merchant ID and userID. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function addUserMerchantPrivileges($id, $product_id = null, $coupon_id = null, $create_merchant_user_role = null)
    {
        list($response) = $this->addUserMerchantPrivilegesWithHttpInfo($id, $product_id, $coupon_id, $create_merchant_user_role);
        return $response;
    }

    /**
     * Operation addUserMerchantPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @param string $product_id ID of the Product connected with the Company (optional)
     * @param string $coupon_id ID of the Coupon connected with the Company (optional)
     * @param \Swagger\Client\Model\CreateMerchantUserRole $create_merchant_user_role Merchant&#39;s User Priveleges Parameters for the merchant ID and userID. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserMerchantPrivilegesWithHttpInfo($id, $product_id = null, $coupon_id = null, $create_merchant_user_role = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addUserMerchantPrivileges');
        }
        // parse inputs
        $resourcePath = "/merchant/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($product_id !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($coupon_id !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($coupon_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($create_merchant_user_role)) {
            $_tempBody = $create_merchant_user_role;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/merchant/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation changeUserMerchantPrivileges
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @param \Swagger\Client\Model\UpdateMerchantUserRole $update_merchant_user_role Merchant&#39;s User Priveleges Parameters for the Merchant ID and UserID. (required)
     * @param string $product_id ID of the Product connected with the Company (optional)
     * @param string $coupon_id ID of the Coupon connected with the Company (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function changeUserMerchantPrivileges($id, $update_merchant_user_role, $product_id = null, $coupon_id = null)
    {
        list($response) = $this->changeUserMerchantPrivilegesWithHttpInfo($id, $update_merchant_user_role, $product_id, $coupon_id);
        return $response;
    }

    /**
     * Operation changeUserMerchantPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @param \Swagger\Client\Model\UpdateMerchantUserRole $update_merchant_user_role Merchant&#39;s User Priveleges Parameters for the Merchant ID and UserID. (required)
     * @param string $product_id ID of the Product connected with the Company (optional)
     * @param string $coupon_id ID of the Coupon connected with the Company (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function changeUserMerchantPrivilegesWithHttpInfo($id, $update_merchant_user_role, $product_id = null, $coupon_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling changeUserMerchantPrivileges');
        }
        // verify the required parameter 'update_merchant_user_role' is set
        if ($update_merchant_user_role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $update_merchant_user_role when calling changeUserMerchantPrivileges');
        }
        // parse inputs
        $resourcePath = "/merchant/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($product_id !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($coupon_id !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($coupon_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($update_merchant_user_role)) {
            $_tempBody = $update_merchant_user_role;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/merchant/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCouponMerchant
     *
     * 
     *
     * @param string $id ID for the merchant (required)
     * @param \Swagger\Client\Model\MerchantCouponCreateParameters $merchant_coupon_create_parameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Coupon
     */
    public function createCouponMerchant($id, $merchant_coupon_create_parameters)
    {
        list($response) = $this->createCouponMerchantWithHttpInfo($id, $merchant_coupon_create_parameters);
        return $response;
    }

    /**
     * Operation createCouponMerchantWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the merchant (required)
     * @param \Swagger\Client\Model\MerchantCouponCreateParameters $merchant_coupon_create_parameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids and offerproviderids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponMerchantWithHttpInfo($id, $merchant_coupon_create_parameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createCouponMerchant');
        }
        // verify the required parameter 'merchant_coupon_create_parameters' is set
        if ($merchant_coupon_create_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_coupon_create_parameters when calling createCouponMerchant');
        }
        // parse inputs
        $resourcePath = "/merchant/{id}/coupon/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_coupon_create_parameters)) {
            $_tempBody = $merchant_coupon_create_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/merchant/{id}/coupon/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createMerchant
     *
     * 
     *
     * @param \Swagger\Client\Model\MerchantCreateParameters $merchant_create_parameters Merchant parameters for creating new Merchant consisting of userID, merchant name, address and logo. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Merchant
     */
    public function createMerchant($merchant_create_parameters)
    {
        list($response) = $this->createMerchantWithHttpInfo($merchant_create_parameters);
        return $response;
    }

    /**
     * Operation createMerchantWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\MerchantCreateParameters $merchant_create_parameters Merchant parameters for creating new Merchant consisting of userID, merchant name, address and logo. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Merchant, HTTP status code, HTTP response headers (array of strings)
     */
    public function createMerchantWithHttpInfo($merchant_create_parameters)
    {
        // verify the required parameter 'merchant_create_parameters' is set
        if ($merchant_create_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_create_parameters when calling createMerchant');
        }
        // parse inputs
        $resourcePath = "/merchant/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_create_parameters)) {
            $_tempBody = $merchant_create_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Merchant',
                '/merchant/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Merchant', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Merchant', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProductMerchant
     *
     * 
     *
     * @param string $id ID for the merchant (required)
     * @param \Swagger\Client\Model\MerchantProductCreateParameters $merchant_product_create_parameters Product parameters for creating new product consisting of product type, name, description, brandID, images. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Product
     */
    public function createProductMerchant($id, $merchant_product_create_parameters)
    {
        list($response) = $this->createProductMerchantWithHttpInfo($id, $merchant_product_create_parameters);
        return $response;
    }

    /**
     * Operation createProductMerchantWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the merchant (required)
     * @param \Swagger\Client\Model\MerchantProductCreateParameters $merchant_product_create_parameters Product parameters for creating new product consisting of product type, name, description, brandID, images. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductMerchantWithHttpInfo($id, $merchant_product_create_parameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createProductMerchant');
        }
        // verify the required parameter 'merchant_product_create_parameters' is set
        if ($merchant_product_create_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_product_create_parameters when calling createProductMerchant');
        }
        // parse inputs
        $resourcePath = "/merchant/{id}/product/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_product_create_parameters)) {
            $_tempBody = $merchant_product_create_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/merchant/{id}/product/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getMerchantById
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Merchant
     */
    public function getMerchantById($id)
    {
        list($response) = $this->getMerchantByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getMerchantByIdWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Merchant, HTTP status code, HTTP response headers (array of strings)
     */
    public function getMerchantByIdWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getMerchantById');
        }
        // parse inputs
        $resourcePath = "/merchant/details/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Merchant',
                '/merchant/details/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Merchant', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Merchant', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation merchantGetProducts
     *
     * 
     *
     * @param string $id UserID for the merchant to find the Products for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Product
     */
    public function merchantGetProducts($id)
    {
        list($response) = $this->merchantGetProductsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation merchantGetProductsWithHttpInfo
     *
     * 
     *
     * @param string $id UserID for the merchant to find the Products for. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function merchantGetProductsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling merchantGetProducts');
        }
        // parse inputs
        $resourcePath = "/merchant/{id}/getProducts";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/merchant/{id}/getProducts'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeUserMerchantPrivileges
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @param \Swagger\Client\Model\DeleteMerchantUserRole $delete_merchant_user_role Merchant&#39;s User ID and privileges to be removed  for the merchant ID. (required)
     * @param string $product_id ID of the Product connected with the Company (optional)
     * @param string $coupon_id ID of the Coupon connected with the Company (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function removeUserMerchantPrivileges($id, $delete_merchant_user_role, $product_id = null, $coupon_id = null)
    {
        list($response) = $this->removeUserMerchantPrivilegesWithHttpInfo($id, $delete_merchant_user_role, $product_id, $coupon_id);
        return $response;
    }

    /**
     * Operation removeUserMerchantPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the merchant being searched for. (required)
     * @param \Swagger\Client\Model\DeleteMerchantUserRole $delete_merchant_user_role Merchant&#39;s User ID and privileges to be removed  for the merchant ID. (required)
     * @param string $product_id ID of the Product connected with the Company (optional)
     * @param string $coupon_id ID of the Coupon connected with the Company (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeUserMerchantPrivilegesWithHttpInfo($id, $delete_merchant_user_role, $product_id = null, $coupon_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeUserMerchantPrivileges');
        }
        // verify the required parameter 'delete_merchant_user_role' is set
        if ($delete_merchant_user_role === null) {
            throw new \InvalidArgumentException('Missing the required parameter $delete_merchant_user_role when calling removeUserMerchantPrivileges');
        }
        // parse inputs
        $resourcePath = "/merchant/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($product_id !== null) {
            $queryParams['productID'] = $this->apiClient->getSerializer()->toQueryValue($product_id);
        }
        // query params
        if ($coupon_id !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($coupon_id);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($delete_merchant_user_role)) {
            $_tempBody = $delete_merchant_user_role;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/merchant/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateMerchant
     *
     * 
     *
     * @param string $id ID for the merchant to be updated. (required)
     * @param \Swagger\Client\Model\MerchantUpdateParameters $merchant_update_parameters Merchant parameters for updating merchant consisting of product type, name, description, brandID, images and optionally merchantids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\MerchantID
     */
    public function updateMerchant($id, $merchant_update_parameters)
    {
        list($response) = $this->updateMerchantWithHttpInfo($id, $merchant_update_parameters);
        return $response;
    }

    /**
     * Operation updateMerchantWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the merchant to be updated. (required)
     * @param \Swagger\Client\Model\MerchantUpdateParameters $merchant_update_parameters Merchant parameters for updating merchant consisting of product type, name, description, brandID, images and optionally merchantids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\MerchantID, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateMerchantWithHttpInfo($id, $merchant_update_parameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateMerchant');
        }
        // verify the required parameter 'merchant_update_parameters' is set
        if ($merchant_update_parameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $merchant_update_parameters when calling updateMerchant');
        }
        // parse inputs
        $resourcePath = "/merchant/details/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($merchant_update_parameters)) {
            $_tempBody = $merchant_update_parameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\MerchantID',
                '/merchant/details/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\MerchantID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\MerchantID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
