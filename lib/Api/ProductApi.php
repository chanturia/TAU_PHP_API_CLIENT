<?php
/**
 * ProductApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Coupons Api
 *
 * TrustAndUse coupons api in the swagger-2.0 specification
 *
 * OpenAPI spec version: 1.0.0
 * Contact: sp@7indigo.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return ProductApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addProductBarcode
     *
     * 
     *
     * @param string $id ID for the product to be updated. (required)
     * @param \Swagger\Client\Model\AddBarcode $addBarcode Barcode parameters for updating product (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProductID
     */
    public function addProductBarcode($id, $addBarcode, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        list($response) = $this->addProductBarcodeWithHttpInfo($id, $addBarcode, $companyID, $brandID, $storeID, $merchantID);
        return $response;
    }

    /**
     * Operation addProductBarcodeWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the product to be updated. (required)
     * @param \Swagger\Client\Model\AddBarcode $addBarcode Barcode parameters for updating product (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProductID, HTTP status code, HTTP response headers (array of strings)
     */
    public function addProductBarcodeWithHttpInfo($id, $addBarcode, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addProductBarcode');
        }
        // verify the required parameter 'addBarcode' is set
        if ($addBarcode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $addBarcode when calling addProductBarcode');
        }
        // parse inputs
        $resourcePath = "/product/{id}/barcodes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($companyID !== null) {
            $queryParams['companyID'] = $this->apiClient->getSerializer()->toQueryValue($companyID);
        }
        // query params
        if ($brandID !== null) {
            $queryParams['brandID'] = $this->apiClient->getSerializer()->toQueryValue($brandID);
        }
        // query params
        if ($storeID !== null) {
            $queryParams['storeID'] = $this->apiClient->getSerializer()->toQueryValue($storeID);
        }
        // query params
        if ($merchantID !== null) {
            $queryParams['merchantID'] = $this->apiClient->getSerializer()->toQueryValue($merchantID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($addBarcode)) {
            $_tempBody = $addBarcode;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductID',
                '/product/{id}/barcodes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addUserProduct
     *
     * 
     *
     * @param string $id ID for the Product (required)
     * @param \Swagger\Client\Model\ProductAdminRole $productAdminRole Product&#39;s User Priveleges Parameters for the productID and UserID. (required)
     * @param string $couponID ID of the Coupon connected with the Product (only required for Authorization for the User making the request) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function addUserProduct($id, $productAdminRole, $couponID = null)
    {
        list($response) = $this->addUserProductWithHttpInfo($id, $productAdminRole, $couponID);
        return $response;
    }

    /**
     * Operation addUserProductWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Product (required)
     * @param \Swagger\Client\Model\ProductAdminRole $productAdminRole Product&#39;s User Priveleges Parameters for the productID and UserID. (required)
     * @param string $couponID ID of the Coupon connected with the Product (only required for Authorization for the User making the request) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function addUserProductWithHttpInfo($id, $productAdminRole, $couponID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addUserProduct');
        }
        // verify the required parameter 'productAdminRole' is set
        if ($productAdminRole === null) {
            throw new \InvalidArgumentException('Missing the required parameter $productAdminRole when calling addUserProduct');
        }
        // parse inputs
        $resourcePath = "/product/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($couponID !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($couponID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($productAdminRole)) {
            $_tempBody = $productAdminRole;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/product/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation allProducts
     *
     * 
     *
     * @param string $name Optional filter parameter to search for products with a name that contains value of parameter name. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProductsArray
     */
    public function allProducts($name = null)
    {
        list($response) = $this->allProductsWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation allProductsWithHttpInfo
     *
     * 
     *
     * @param string $name Optional filter parameter to search for products with a name that contains value of parameter name. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProductsArray, HTTP status code, HTTP response headers (array of strings)
     */
    public function allProductsWithHttpInfo($name = null)
    {
        // parse inputs
        $resourcePath = "/product/all";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductsArray',
                '/product/all'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductsArray', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductsArray', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createCouponProduct
     *
     * 
     *
     * @param string $id ID of the Product (required)
     * @param \Swagger\Client\Model\ProductCouponCreateParameters $productCouponCreateParameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Coupon
     */
    public function createCouponProduct($id, $productCouponCreateParameters)
    {
        list($response) = $this->createCouponProductWithHttpInfo($id, $productCouponCreateParameters);
        return $response;
    }

    /**
     * Operation createCouponProductWithHttpInfo
     *
     * 
     *
     * @param string $id ID of the Product (required)
     * @param \Swagger\Client\Model\ProductCouponCreateParameters $productCouponCreateParameters Coupon Parameters consisting of userid who initiated the creation proccess, products ids, categories ids, subcategories ids, primitives ids and optionally store ids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponProductWithHttpInfo($id, $productCouponCreateParameters)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling createCouponProduct');
        }
        // verify the required parameter 'productCouponCreateParameters' is set
        if ($productCouponCreateParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $productCouponCreateParameters when calling createCouponProduct');
        }
        // parse inputs
        $resourcePath = "/product/{id}/coupon/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($productCouponCreateParameters)) {
            $_tempBody = $productCouponCreateParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/product/{id}/coupon/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createProduct
     *
     * 
     *
     * @param \Swagger\Client\Model\ProductParameters $productParameters Product parameters for creating new product consisting of product type, name, description, brandID, images and optionally merchantids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Product
     */
    public function createProduct($productParameters)
    {
        list($response) = $this->createProductWithHttpInfo($productParameters);
        return $response;
    }

    /**
     * Operation createProductWithHttpInfo
     *
     * 
     *
     * @param \Swagger\Client\Model\ProductParameters $productParameters Product parameters for creating new product consisting of product type, name, description, brandID, images and optionally merchantids. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function createProductWithHttpInfo($productParameters)
    {
        // verify the required parameter 'productParameters' is set
        if ($productParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $productParameters when calling createProduct');
        }
        // parse inputs
        $resourcePath = "/product/create";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($productParameters)) {
            $_tempBody = $productParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/product/create'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteProduct
     *
     * 
     *
     * @param string $id ID for the product to be deleted. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Success
     */
    public function deleteProduct($id, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        list($response) = $this->deleteProductWithHttpInfo($id, $companyID, $brandID, $storeID, $merchantID);
        return $response;
    }

    /**
     * Operation deleteProductWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the product to be deleted. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Success, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteProductWithHttpInfo($id, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteProduct');
        }
        // parse inputs
        $resourcePath = "/product/{id}/delete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($companyID !== null) {
            $queryParams['companyID'] = $this->apiClient->getSerializer()->toQueryValue($companyID);
        }
        // query params
        if ($brandID !== null) {
            $queryParams['brandID'] = $this->apiClient->getSerializer()->toQueryValue($brandID);
        }
        // query params
        if ($storeID !== null) {
            $queryParams['storeID'] = $this->apiClient->getSerializer()->toQueryValue($storeID);
        }
        // query params
        if ($merchantID !== null) {
            $queryParams['merchantID'] = $this->apiClient->getSerializer()->toQueryValue($merchantID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Success',
                '/product/{id}/delete'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Success', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Success', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductById
     *
     * 
     *
     * @param string $id ID for the product being searched for. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a Company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Product
     */
    public function getProductById($id, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        list($response) = $this->getProductByIdWithHttpInfo($id, $companyID, $brandID, $storeID, $merchantID);
        return $response;
    }

    /**
     * Operation getProductByIdWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the product being searched for. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a Company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductByIdWithHttpInfo($id, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getProductById');
        }
        // parse inputs
        $resourcePath = "/product/details/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($companyID !== null) {
            $queryParams['companyID'] = $this->apiClient->getSerializer()->toQueryValue($companyID);
        }
        // query params
        if ($brandID !== null) {
            $queryParams['brandID'] = $this->apiClient->getSerializer()->toQueryValue($brandID);
        }
        // query params
        if ($storeID !== null) {
            $queryParams['storeID'] = $this->apiClient->getSerializer()->toQueryValue($storeID);
        }
        // query params
        if ($merchantID !== null) {
            $queryParams['merchantID'] = $this->apiClient->getSerializer()->toQueryValue($merchantID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/product/details/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getProductCoupons
     *
     * 
     *
     * @param string $id ID for the product to find the coupons for (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Coupon
     */
    public function getProductCoupons($id)
    {
        list($response) = $this->getProductCouponsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getProductCouponsWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the product to find the coupons for (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductCouponsWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getProductCoupons');
        }
        // parse inputs
        $resourcePath = "/product/{id}/coupons";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Coupon',
                '/product/{id}/coupons'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Coupon', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Coupon', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation removeUserProductPrivileges
     *
     * 
     *
     * @param string $id ID for the Product (required)
     * @param \Swagger\Client\Model\DeleteProductUserRole $deleteProductUserRole Product&#39;s User ID and privileges to be removed  for the product ID. (required)
     * @param string $couponID ID of the Coupon connected with the Product (only required for Authorization for the User making the request) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\UserID
     */
    public function removeUserProductPrivileges($id, $deleteProductUserRole, $couponID = null)
    {
        list($response) = $this->removeUserProductPrivilegesWithHttpInfo($id, $deleteProductUserRole, $couponID);
        return $response;
    }

    /**
     * Operation removeUserProductPrivilegesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the Product (required)
     * @param \Swagger\Client\Model\DeleteProductUserRole $deleteProductUserRole Product&#39;s User ID and privileges to be removed  for the product ID. (required)
     * @param string $couponID ID of the Coupon connected with the Product (only required for Authorization for the User making the request) (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\UserID, HTTP status code, HTTP response headers (array of strings)
     */
    public function removeUserProductPrivilegesWithHttpInfo($id, $deleteProductUserRole, $couponID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling removeUserProductPrivileges');
        }
        // verify the required parameter 'deleteProductUserRole' is set
        if ($deleteProductUserRole === null) {
            throw new \InvalidArgumentException('Missing the required parameter $deleteProductUserRole when calling removeUserProductPrivileges');
        }
        // parse inputs
        $resourcePath = "/product/{id}/user";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($couponID !== null) {
            $queryParams['couponID'] = $this->apiClient->getSerializer()->toQueryValue($couponID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($deleteProductUserRole)) {
            $_tempBody = $deleteProductUserRole;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\UserID',
                '/product/{id}/user'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\UserID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UserID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateBarcodes
     *
     * 
     *
     * @param string $id ID for the product to be updated. (required)
     * @param \Swagger\Client\Model\UpdateBarcode $updateBarcode Product parameters for updating product consisting of productID for which to update the barcodes, userID for Authorization to grand permission and barcodes array. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a Company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProductID
     */
    public function updateBarcodes($id, $updateBarcode, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        list($response) = $this->updateBarcodesWithHttpInfo($id, $updateBarcode, $companyID, $brandID, $storeID, $merchantID);
        return $response;
    }

    /**
     * Operation updateBarcodesWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the product to be updated. (required)
     * @param \Swagger\Client\Model\UpdateBarcode $updateBarcode Product parameters for updating product consisting of productID for which to update the barcodes, userID for Authorization to grand permission and barcodes array. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a Company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProductID, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateBarcodesWithHttpInfo($id, $updateBarcode, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateBarcodes');
        }
        // verify the required parameter 'updateBarcode' is set
        if ($updateBarcode === null) {
            throw new \InvalidArgumentException('Missing the required parameter $updateBarcode when calling updateBarcodes');
        }
        // parse inputs
        $resourcePath = "/product/{id}/barcodes";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($companyID !== null) {
            $queryParams['companyID'] = $this->apiClient->getSerializer()->toQueryValue($companyID);
        }
        // query params
        if ($brandID !== null) {
            $queryParams['brandID'] = $this->apiClient->getSerializer()->toQueryValue($brandID);
        }
        // query params
        if ($storeID !== null) {
            $queryParams['storeID'] = $this->apiClient->getSerializer()->toQueryValue($storeID);
        }
        // query params
        if ($merchantID !== null) {
            $queryParams['merchantID'] = $this->apiClient->getSerializer()->toQueryValue($merchantID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($updateBarcode)) {
            $_tempBody = $updateBarcode;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductID',
                '/product/{id}/barcodes'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateProduct
     *
     * 
     *
     * @param string $id ID for the product to be updated. (required)
     * @param \Swagger\Client\Model\UpdateProductParameters $updateProductParameters Product parameters for updating product consisting of product type, name, description, brandID, images and merchantids. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProductID
     */
    public function updateProduct($id, $updateProductParameters, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        list($response) = $this->updateProductWithHttpInfo($id, $updateProductParameters, $companyID, $brandID, $storeID, $merchantID);
        return $response;
    }

    /**
     * Operation updateProductWithHttpInfo
     *
     * 
     *
     * @param string $id ID for the product to be updated. (required)
     * @param \Swagger\Client\Model\UpdateProductParameters $updateProductParameters Product parameters for updating product consisting of product type, name, description, brandID, images and merchantids. (required)
     * @param string $companyID Company ID Parameter for the company that the product is connected to. Required only if the product is connected with a company. (optional)
     * @param string $brandID Brand ID Parameter for the Brand that the product is connected to. Required only if the product is connected with a Brand. (optional)
     * @param string $storeID Store ID Parameter for the Store that the product is connected to. Required only if the product is connected with a Store. (optional)
     * @param string $merchantID Merchant ID Parameter for the Merchant that the product is connected to. Required only if the product is connected with a Merchant. (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProductID, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateProductWithHttpInfo($id, $updateProductParameters, $companyID = null, $brandID = null, $storeID = null, $merchantID = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateProduct');
        }
        // verify the required parameter 'updateProductParameters' is set
        if ($updateProductParameters === null) {
            throw new \InvalidArgumentException('Missing the required parameter $updateProductParameters when calling updateProduct');
        }
        // parse inputs
        $resourcePath = "/product/details/{id}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($companyID !== null) {
            $queryParams['companyID'] = $this->apiClient->getSerializer()->toQueryValue($companyID);
        }
        // query params
        if ($brandID !== null) {
            $queryParams['brandID'] = $this->apiClient->getSerializer()->toQueryValue($brandID);
        }
        // query params
        if ($storeID !== null) {
            $queryParams['storeID'] = $this->apiClient->getSerializer()->toQueryValue($storeID);
        }
        // query params
        if ($merchantID !== null) {
            $queryParams['merchantID'] = $this->apiClient->getSerializer()->toQueryValue($merchantID);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($updateProductParameters)) {
            $_tempBody = $updateProductParameters;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductID',
                '/product/details/{id}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductID', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductID', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Error', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
